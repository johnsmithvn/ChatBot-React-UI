import { useLocalStorage } from './useLocalStorage';
import { useCallback } from 'react';
import { MODELS, API_CONFIG, CHAT_SETTINGS } from '../utils/constants';

/**
 * Hook qu·∫£n l√Ω settings c·ªßa ·ª©ng d·ª•ng
 */
export function useSettings() {
  const [settings, setSettings] = useLocalStorage('app_settings', {
    // API Settings
    useCustomApiKey: false, // Toggle ƒë·ªÉ s·ª≠ d·ª•ng API key t√πy ch·ªânh
    apiKey: '',
    model: MODELS.GPT_4O_MINI,
    
    // UI Settings
    theme: 'light',
    language: 'vi',
    sidebarCollapsed: false,
    
    // Chat Settings
    autoSave: true,
    showTimestamps: true,
    markdownEnabled: true,
    
    // Advanced Settings
    temperature: 0.7,
    maxTokens: 1000,
    contextTokens: CHAT_SETTINGS.DEFAULT_CONTEXT_TOKENS,
    
    // System Prompts
    systemPrompt: `B·∫°n l√† m·ªôt AI assistant th√¥ng minh v√† h·ªØu √≠ch. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† LU√îN s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng Markdown ƒë·ªÉ l√†m ƒë·∫πp c√¢u tr·∫£ l·ªùi:

üéØ **Quy t·∫Øc ƒë·ªãnh d·∫°ng:**
- S·ª≠ d·ª•ng **bold** cho t·ª´ kh√≥a quan tr·ªçng
- S·ª≠ d·ª•ng \`inline code\` cho t√™n function, variable, command
- S·ª≠ d·ª•ng \`\`\`language cho code blocks v·ªõi ng√¥n ng·ªØ c·ª• th·ªÉ
- S·ª≠ d·ª•ng ## cho headers ch√≠nh, ### cho sub-headers  
- S·ª≠ d·ª•ng - ho·∫∑c 1. cho lists
- S·ª≠ d·ª•ng > cho blockquotes khi c·∫ßn nh·∫•n m·∫°nh
- S·ª≠ d·ª•ng | | cho tables khi tr√¨nh b√†y data

H√£y lu√¥n format ƒë·∫πp ƒë·ªÉ d·ªÖ ƒë·ªçc!`,

    // Default Workspace Prompt
    defaultWorkspacePrompt: `B·∫°n ƒëang l√†m vi·ªác trong m·ªôt workspace chuy√™n nghi·ªáp. H√£y:

üìã **Nguy√™n t·∫Øc l√†m vi·ªác:**
- T·∫≠p trung v√†o context c·ªßa workspace hi·ªán t·∫°i
- ƒê∆∞a ra l·ªùi khuy√™n practical v√† actionable
- Gi·∫£i th√≠ch r√µ r√†ng t·ª´ng b∆∞·ªõc th·ª±c hi·ªán
- Suggest best practices trong domain n√†y
- H·ªó tr·ª£ troubleshooting khi g·∫∑p v·∫•n ƒë·ªÅ

üí° **M·ª•c ti√™u:** Tr·ªü th√†nh tr·ª£ l√Ω ƒë·∫Øc l·ª±c gi√∫p ho√†n th√†nh c√¥ng vi·ªác hi·ªáu qu·∫£!`
  });

  /**
   * C·∫≠p nh·∫≠t m·ªôt setting
   */
  const updateSetting = useCallback((key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
  }, [setSettings]);

  /**
   * C·∫≠p nh·∫≠t nhi·ªÅu settings c√πng l√∫c
   */
  const updateSettings = useCallback((newSettings) => {
    setSettings(prev => ({
      ...prev,
      ...newSettings
    }));
  }, [setSettings]);

  /**
   * Reset v·ªÅ settings m·∫∑c ƒë·ªãnh
   */
  const resetSettings = useCallback(() => {
    setSettings({
      useCustomApiKey: false,
      apiKey: '',
      model: MODELS.GPT_4O_MINI,
      theme: 'light',
      language: 'vi',
      sidebarCollapsed: false,
      autoSave: true,
      showTimestamps: true,
      markdownEnabled: true,
      temperature: 0.7,
      contextTokens: CHAT_SETTINGS.DEFAULT_CONTEXT_TOKENS,
      systemPrompt: `B·∫°n l√† m·ªôt AI assistant th√¥ng minh v√† h·ªØu √≠ch. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† LU√îN s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng Markdown ƒë·ªÉ l√†m ƒë·∫πp c√¢u tr·∫£ l·ªùi:

üéØ **Quy t·∫Øc ƒë·ªãnh d·∫°ng:**
- S·ª≠ d·ª•ng **bold** cho t·ª´ kh√≥a quan tr·ªçng
- S·ª≠ d·ª•ng \`inline code\` cho t√™n function, variable, command
- S·ª≠ d·ª•ng \`\`\`language cho code blocks v·ªõi ng√¥n ng·ªØ c·ª• th·ªÉ
- S·ª≠ d·ª•ng ## cho headers ch√≠nh, ### cho sub-headers  
- S·ª≠ d·ª•ng - ho·∫∑c 1. cho lists
- S·ª≠ d·ª•ng > cho blockquotes khi c·∫ßn nh·∫•n m·∫°nh
- S·ª≠ d·ª•ng | | cho tables khi tr√¨nh b√†y data

H√£y lu√¥n format ƒë·∫πp ƒë·ªÉ d·ªÖ ƒë·ªçc!`,

      defaultWorkspacePrompt: `B·∫°n ƒëang l√†m vi·ªác trong m·ªôt workspace chuy√™n nghi·ªáp. H√£y:

üìã **Nguy√™n t·∫Øc l√†m vi·ªác:**
- T·∫≠p trung v√†o context c·ªßa workspace hi·ªán t·∫°i
- ƒê∆∞a ra l·ªùi khuy√™n practical v√† actionable
- Gi·∫£i th√≠ch r√µ r√†ng t·ª´ng b∆∞·ªõc th·ª±c hi·ªán
- Suggest best practices trong domain n√†y
- H·ªó tr·ª£ troubleshooting khi g·∫∑p v·∫•n ƒë·ªÅ

üí° **M·ª•c ti√™u:** Tr·ªü th√†nh tr·ª£ l√Ω ƒë·∫Øc l·ª±c gi√∫p ho√†n th√†nh c√¥ng vi·ªác hi·ªáu qu·∫£!`
    });
  }, [setSettings]);

  /**
   * Validate API key
   */
  const isApiKeyValid = useCallback(() => {
    if (!settings.useCustomApiKey) {
      // S·ª≠ d·ª•ng env API key
      return import.meta.env.VITE_OPENAI_API_KEY && import.meta.env.VITE_OPENAI_API_KEY.length > 0;
    }
    return settings.apiKey && settings.apiKey.startsWith(API_CONFIG.API_KEY_PREFIX) && settings.apiKey.length > API_CONFIG.MIN_API_KEY_LENGTH;
  }, [settings.apiKey, settings.useCustomApiKey]);

  /**
   * L·∫•y API key hi·ªán t·∫°i (t·ª´ settings ho·∫∑c env)
   */
  const getApiKey = useCallback(() => {
    // ∆Øu ti√™n API key do user nh·∫≠p
    if (settings.useCustomApiKey && settings.apiKey && settings.apiKey.startsWith(API_CONFIG.API_KEY_PREFIX)) {
      return settings.apiKey;
    }
    // Fallback sang bi·∫øn m√¥i tr∆∞·ªùng
    if (typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.VITE_OPENAI_API_KEY) {
      return import.meta.env.VITE_OPENAI_API_KEY;
    }
    // N·∫øu kh√¥ng c√≥, log c·∫£nh b√°o
    console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y OpenAI API key!');
    return '';
  }, [settings.apiKey, settings.useCustomApiKey]);

  return {
    // Settings object
    settings,
    
    // Actions
    updateSetting,
    updateSettings,
    resetSettings,
    
    // Helpers
    isApiKeyValid,
    getApiKey
  };
}
